#define RES GPIO_PIN_0
#define DC GPIO_PIN_13
#define DC_CMD 0
#define DC_DATA 1
#define OLED_DATA 1
#define OLED_CMD 0

void print(unsigned char *str)  // 显示到OLED屏幕上
{
	static unsigned char row = 0;
	unsigned char col = 0;
	OLED_ShowString(col, row, str);
	row = (row+2) % 8;
}
//显示一个字符号串
void OLED_ShowString(unsigned char x,unsigned char y,unsigned char *chr)
{
	unsigned char j=0;
	while (chr[j]!='\0')
	{		OLED_ShowChar(x,y,chr[j]);
			x+=8;
		if(x>120){x=0;y+=2;}
			j++;
	}
}

void OLED_ShowChinese(unsigned char x,unsigned char y,unsigned char WordID)  // 显示字符16x16
{
	unsigned char c=0,i=0;
	c=WordID;
	if(x>128-1){x=0;y=y+2;}
	{
		OLED_Set_Pos(x,y);
		for(i=0;i<16;i++)
		OLED_WR_Byte(F16X16[2*c*16+i],OLED_DATA);
		OLED_Set_Pos(x,y+1);
		for(i=0;i<16;i++)
		OLED_WR_Byte(F16X16[2*c*16+i+16],OLED_DATA);
	}
}

void OLED_ShowChar(unsigned char x,unsigned char y,unsigned char chr)  // 显示字符8x16
{
	unsigned char c=0,i=0;
	c=chr-' ';//得到偏移后的值
	if(x>128-1){x=0;y=y+2;}
	{
		OLED_Set_Pos(x,y);
		for(i=0;i<8;i++)
		OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
		OLED_Set_Pos(x,y+1);
		for(i=0;i<8;i++)
		OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
	}
}

//开启OLED显示
void OLED_Display_On(void)
{
	OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
	OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
	OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
}
//关闭OLED显示
void OLED_Display_Off(void)
{
	OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}

void OLED_DrawBMP(unsigned char x0, unsigned char y0,unsigned char x1, unsigned char y1,unsigned char BMP[])
{
 unsigned int j=0;
 unsigned char x,y;

  //if(y1%8==0) y=y1/8;
  //else y=y1/8+1;
	for(y=y0;y<y1;y++)
	{
		OLED_Set_Pos(x0,y);
    for(x=x0;x<x1;x++)
	    {
	    	OLED_WR_Byte(BMP[j++],OLED_DATA);
	    }
	}
}

void OLED_Set_Pos(unsigned char x, unsigned char y)
{
	OLED_WR_Byte(0xb0+y,OLED_CMD);
	OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
	OLED_WR_Byte((x&0x0f)|0x01,OLED_CMD);
}

void OLED_CLEAR()
{
	unsigned char  i, j = 0;
	    for(i=0;i<8;i++)
	  	{
	  	  OLED_WR_Byte(0xb0+i, OLED_CMD);
	  	  OLED_WR_Byte(0x00, OLED_CMD);
	  	  OLED_WR_Byte(0x10, OLED_CMD);

	  	  for(j=0;j<128;j++)OLED_WR_Byte(0x00,OLED_DATA);
	  	}

}

void OLED_INIT()
{
		HAL_Delay(100);
	  	HAL_GPIO_WritePin(GPIOB, RES, GPIO_PIN_RESET);
	  	HAL_Delay(100);
	  	HAL_GPIO_WritePin(GPIOB, RES, GPIO_PIN_SET);


	  	unsigned char data[] = {0xAE, 0x00, 0x10, 0x40, 0x81,
								0xff, 0xa1, 0xc8, 0xa6, 0xa8, 0x3f, 0xd3,
								0x00, 0xd5, 0x80, 0xd9, 0xf1, 0xda, 0x12,
								0xdb, 0x40, 0x20, 0x02, 0x8D, 0x14, 0xA4,
								0xa6, 0xaf, 0xaf};
	  	HAL_GPIO_WritePin(GPIOC, DC, DC_CMD);
	  	unsigned char i;
	  	for(i=0; i<29; i++)
	  	HAL_SPI_Transmit(&hspi1, &data[i], 1, 1000);
}

void OLED_WR_Byte(unsigned char byte, unsigned char type){
	unsigned char data = byte;
	if(type == OLED_DATA)
	{
		HAL_GPIO_WritePin(GPIOC, DC, DC_DATA);
		HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, DC, DC_CMD);
		HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
	}
}
